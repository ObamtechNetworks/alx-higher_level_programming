The examples below tests the use of the ``MyList` class and its method
-------------------------------------------------------------------

The ``MyList`` class inherits from the native ``list`` class in python
It has a public instance method: ``print_sorted``
This method prints the generated list from MyList in ascending sort
::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

---------------------------------------
Check for presence of module's docstring
----------------------------------------

::

    >>> module_doc = __import__("1-my_list").__doc__
    >>> len(module_doc) > 1
    True

---------------------------------------
Check for presence of class' docstring
----------------------------------------

::

    >>> class_doc = __import__("1-my_list").MyList.__doc__
    >>> len(class_doc) > 1
    True

-------------------------------------------------
Case: Test other output
-------------------------------------------------

::

    >>> new_list = MyList()
    >>> new_list.append(10)
    >>> new_list.append(100)
    >>> new_list.append(30)
    >>> new_list.append(2)
    >>> print(new_list)
    [10, 100, 30, 2]
    >>> new_list.print_sorted()
    [2, 10, 30, 100]
    >>> print(new_list)
    [10, 100, 30, 2]

------------------------------------------
Testing the class directly with list input
------------------------------------------

    >>> my_list = MyList([3, 1, 4, 2, 5])
    >>> my_list.append(6)
    >>> print(my_list)
    [3, 1, 4, 2, 5, 6]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5, 6]

---> Test with NUMBERS lists
    
    >>> number_list = MyList([3, 1, 4, 2, 5])
    >>> print(number_list)
    [3, 1, 4, 2, 5]
    >>> number_list.print_sorted()
    [1, 2, 3, 4, 5]


---> Test with floats lists
::

    >>> float_list = MyList([3.14, 1.1, 2.2, 4.4])
    >>> print(float_list)
    [3.14, 1.1, 2.2, 4.4]
    >>> float_list.print_sorted()
    [1.1, 2.2, 3.14, 4.4]

---> Test with strings list

    >>> string_list = MyList(['apple', 'orange', 'banana'])
    >>> print(string_list)
    ['apple', 'orange', 'banana']
    >>> string_list.print_sorted()
    ['apple', 'banana', 'orange']

---> Test with other class
    >>> class Person: __init__ = lambda self, name, age: setattr(self, 'name', name) or setattr(self, 'age', age)

------------------------------------
Exception cases
------------------------------------
    >>> test = MyList()
    >>> test.append('S')
    >>> test.append(2)
    >>> test.append((2,))
    >>> print(test)
    ['S', 2, (2,)]
    >>> invalid_list = MyList(123)
    Traceback (most recent call last):
       ...
    TypeError: 'int' object is not iterable

    >>> inv = MyList(2.3, 4.4)
    Traceback (most recent call last):
       ...
    TypeError: list() takes at most 1 argument (2 given)

    >>> inva = MyList(2.4352)
    Traceback (most recent call last):
       ...
    TypeError: 'float' object is not iterable

    >>> strr = MyList('str')
    >>> strr
    ['s', 't', 'r']
    >>> strr.print_sorted()
    ['r', 's', 't']



Passing A list
    >>> h = [2, 5, 3]
    >>> my_list = MyList(h)
    >>> my_list.print_sorted()
    [2, 3, 5]
    >>>

----------------------------------------------------------

Passing an empty list
    >>> h = []
    >>> my_list = MyList(h)
    >>> my_list.print_sorted()
    []
    >>> 

-----------------------------------------------------------

Passing the same numbers as a list
    >>> h = [7, 7, 7, 7]
    >>> my_list = MyList(h)
    >>> my_list.print_sorted()
    [7, 7, 7, 7]
    >>>

-----------------------------------------------------------

Passing negative numbers
    >>> h = [7, 7, -17, -27, 37]
    >>> my_list = MyList(h)
    >>> my_list.print_sorted()
    [-27, -17, 7, 7, 37]
    >>>

------------------------------------------------------------

Passing no defined object
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list2.print_sorted()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'my_list2' is not defined
    >>> 

-------------------------------------------------------------

Parent Object
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = [7, 7, -17, -27, 37]
    >>> my_list.print_sorted()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'list' object has no attribute 'print_sorted'
    >>>
