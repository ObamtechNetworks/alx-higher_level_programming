The ``print_square`` func is found in the ``4-print_square`` module
======================================================================

The examples below demonstrates the use of the ``print_square`` function
-----------------------------------------------------------------------

The ``print_square`` function prints a square with the char '#'

Args:

Receives a ``size`` as argument
---> ``size`` must be an integer else, an exception is raised
---> ``size`` also must be > 0, else an exception is raised
---> ``size`` cannot be float and  < 0, else exception is raised

Return: None, it prints the square with the character '#'

First import the function from the module
``print_square`` from the ``4-print_square`` module:

::

    >>> print_square = __import__('4-print_square').print_square

    ---- A sample Usage ----
    >>> print_square(3)
    ###
    ###
    ###

---------------------------------------
Check for presence of module's docstring
----------------------------------------

::

    >>> module_doc = __import__("4-print_square").__doc__
    >>> len(module_doc) > 1
    True

---------------------------------------
Check for presence of function's docstring
----------------------------------------

::

    >>> func_doc = __import__("4-print_square").print_square.__doc__
    >>> len(func_doc) > 1
    True

=============------------------------============
EXCEPTION TESTS ON `size` parameter
=============------------------------============
CASE 1: size not an integer: char, str, obj, float
-------------------------------------------------
::

    --> character
    >>> print_square('10')
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer

     --> string
    >>> print_square("School")
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer

    --> floats
    >>> print_square(3.928)
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer

    --> objects
    >>> print_square([])
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer
    >>> print_square((1, 2, 3, "school"))
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer
    >>> class Size: pass
    >>> print_square(Size)
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer

-----------------------------------------------
CASE 2: size is a float and < 0
-----------------------------------------------
::

    >>> print_square(-3.39)
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer
    >>> print_square(-0.002)
    Traceback (most recent call last):
       ...
    TypeError: size must be an integer

-----------------------------------------------
CASE 3: size is an integer but negatives: [ < 0 ]
-----------------------------------------------
::

    >>> print_square(-5)
    Traceback (most recent call last):
       ...
    ValueError: size must be >= 0
    >>> print_square(-18)
    Traceback (most recent call last):
       ...
    ValueError: size must be >= 0

-----------------------------------------------
CORRECT OUTPUT TESTS
-----------------------------------------------
::

    >>> print_square(4)
    ####
    ####
    ####
    ####

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

    >>> print_square(0)
    >>> print_square(1)
    #

    >>> print_square(2)
    ##
    ##


