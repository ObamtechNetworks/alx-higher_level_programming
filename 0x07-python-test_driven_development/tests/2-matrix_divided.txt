The ``matrix_divided`` func is found in the ``2-matrix_divided`` module
======================================================================

The examples below demonstrates the use of the ``matrix_divided`` function
-----------------------------------------------------------------------

The ``matrix_divided`` function divides all elements of a matrix
A matrix is a list of lists

Args:

Receives a matrix as first arg, and a divisor as second arg
---> divisor must be an integer else, an exception is raised
---> divisor also must not be 0, else an exception is raised

Return: It returns a new matrix

First import the function from the module
``matrix_divided`` from the ``2-matrix_divided`` module:

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

    ---- A sample Usage ----
    >>> matrix = [[1, 2, 3,], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

---------------------------------------
Check for presence of module's docstring
----------------------------------------

::

    >>> module_doc = __import__("2-matrix_divided").__doc__
    >>> len(module_doc) > 1
    True

---------------------------------------
Check for presence of function's docstring
----------------------------------------

::

    >>> func_doc = __import__("2-matrix_divided").matrix_divided.__doc__
    >>> len(func_doc) > 1
    True

=============------------------------============
EXCEPTION TEST ON MATRIX
=============------------------------============
CASE 1: <ARG-1> is not a matrix
-------------------------------
::

    ---> NOT A MATRIX-> an ordinary list

    >>> matrix_divided([1, 2, 3, 4], 2)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    ---> NOT A MATRIX-> integer

    >>> matrix_divided(92, 30)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    ---> NOT A MATRIX-> strings

    >>> matrix_divided("matrix", 3)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    ---> NOT A MATRIX-> None parameter

    >>> matrix_divided(None, 10)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    ---> NOT A MATRIX-> class object
    
    >>> class Matrix: pass
    >>> matrix_divided(Matrix, 22)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
   
   ---> NOT A MATRIX-> list of tuples
    
    >>> matr = [(1, 3, 4), (2, 3, 4)]
    >>> matrix_divided(matr, 4)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

-----------------------------------------------
CASE 2: <ARG-1> matrices but not of equal length
-----------------------------------------------
::

    ---> matrix of varying length-> not equal rows

    >>> matrix_divided([[2, 4, 5], [2, 3]], 2)
    Traceback (most recent call last):
       ...
    TypeError: Each row of the matrix must have the same size
    >>> matrix = [[12, 0, 3, 1], [2, 3, 4, 22, 33, 111]]
    >>> matrix_divided(matrix, 10)
    Traceback (most recent call last):
       ...
    TypeError: Each row of the matrix must have the same size

-----------------------------------------------
CASE 3: <ARG-1> elements of matrix not int/float
-----------------------------------------------
::

    ---> not all elements of matrix is integer or float

    >>> matrix = [[98, 402, "school", "josh"], [1, "2", 3, '4']]
    >>> matrix_divided(matrix, 6)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    >>> m = [[12, (3, 4, "hello"), 4], [100, 2, "4"]]
    >>> matrix_divided(m, 8)
    Traceback (most recent call last):
       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

=============------------------------============
EXCEPTION TESTS ON DIVISIOR <div>
=============------------------------============
-----------------------------------------------
CASE 1: <ARG-2> div not an integer / float
-----------------------------------------------
::

    ---> div is a string

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, "2")
    Traceback (most recent call last):
       ...
    TypeError: div must be a number

    ---> div an object (lists, class, tuple)

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, [])
    Traceback (most recent call last):
       ...
    TypeError: div must be a number
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, (1, 3, 4))
    Traceback (most recent call last):
       ...
    TypeError: div must be a number
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> class Div: pass
    >>> matrix_divided(matrix, Div)
    Traceback (most recent call last):
       ...
    TypeError: div must be a number

-----------------------------------------------
CASE 2: <ARG-2> div is 0
-----------------------------------------------
::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
       ...
    ZeroDivisionError: division by zero

CASE 3: <ARG-2> div is float('inf')
::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

-------------------------------
EMPTY / MISSING ARGUMENTS TEST:
-------------------------------
::

    >>> print(matrix_divided([]))
    Traceback (most recent call last):
       ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided()
    Traceback (most recent call last):
       ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    >>> matrix_divided(10)
    Traceback (most recent call last):
       ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

=============------------------------====================
CORRECT OUTPUTS TESTS (Where both matrix and div are valid
=============------------------------====================
::

    --> must be a new matrix, and elements rounded to 2.DP
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]
