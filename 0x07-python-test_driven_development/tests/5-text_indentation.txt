The ``text_indentation`` func is found in the ``5-text_indentation`` module
======================================================================

The examples below demonstrates the use of the ``text_indentation`` function
-----------------------------------------------------------------------

The ``text_indentation`` function prints a text
--> It adds two new lines after either of: '.', '?' or ':'
--> For each indentation, there is no space at the beginning
--> or at the end of each printed line

Args:
    Receives a ``text`` as argument
    ---> ``text`` must be a string else, an exception is raised
    Return: None, it prints the square with the character '#'

First import the function from the module
``text_indentation`` from the ``5-text_indentation`` module:

::

    >>> text_indentation = __import__('5-text_indentation').text_indentation

    ---- A sample Usage ----
    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres""") # doctest +NORMALIZE_WHITESPACE
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

---------------------------------------
Check for presence of module's docstring
----------------------------------------

::

    >>> module_doc = __import__("5-text_indentation").__doc__
    >>> len(module_doc) > 1
    True

---------------------------------------
Check for presence of function's docstring
----------------------------------------

::

    >>> func_doc = __import__("5-text_indentation").text_indentation.__doc__
    >>> len(func_doc) > 1
    True

=============------------------------============
EXCEPTION TESTS ON `text` parameter
=============------------------------============
CASE 1: text not a string: int, obj, float, tuple
-------------------------------------------------
::

    --> integer
    >>> text_indentation(2034)
    Traceback (most recent call last):
       ...
    TypeError: text must be a string

     --> object
    >>> text_indentation([20, 4, 5])
    Traceback (most recent call last):
       ...
    TypeError: text must be a string

    --> floats
    >>> text_indentation(3.928)
    Traceback (most recent call last):
       ...
    TypeError: text must be a string

    --> objects
    >>> text_indentation((20, '5', "School", 200))
    Traceback (most recent call last):
       ...
    TypeError: text must be a string
    >>> class Size: pass
    >>> text_indentation(Size)
    Traceback (most recent call last):
       ...
    TypeError: text must be a string

-----------------------------------------------
CORRECT OUTPUT TESTS
-----------------------------------------------
::

    >>> text_indentation("""This is a sample text. It has several sentences. Each sentence ends with a period. There are also questions? And some colons: like this one. Let's see how your function handles this input!""") # doctest +NORMALIZE_WHITESPACE
    This is a sample text.
    <BLANKLINE>
    It has several sentences.
    <BLANKLINE>
    Each sentence ends with a period.
    <BLANKLINE>
    There are also questions?
    <BLANKLINE>
    And some colons:
    <BLANKLINE>
    like this one.
    <BLANKLINE>
    Let's see how your function handles this input!
    
    >>> text_indentation("Hello there! How are you doing? I hope you're doing well. Let's catch up soon. What do you think about this new feature? Is it useful: or just a fancy addition?") # doctest +NORMALIZE_WHITESPACE
    Hello there! How are you doing?
    <BLANKLINE>
    I hope you're doing well.
    <BLANKLINE>
    Let's catch up soon.
    <BLANKLINE>
    What do you think about this new feature?
    <BLANKLINE>
    Is it useful:
    <BLANKLINE>
    or just a fancy addition?
    <BLANKLINE>

    >>> text_indentation("One. Two. Three. Four. Five. How many sentences are there? Is the function counting correctly? Let's add a colon: and check if it handles it properly.") # doctest +NORMALIZE_WHITESPACE
    One.
    <BLANKLINE>
    Two.
    <BLANKLINE>
    Three.
    <BLANKLINE>
    Four.
    <BLANKLINE>
    Five.
    <BLANKLINE>
    How many sentences are there?
    <BLANKLINE>
    Is the function counting correctly?
    <BLANKLINE>
    Let's add a colon:
    <BLANKLINE>
    and check if it handles it properly.
    <BLANKLINE>

    >>> text_indentation("This is a test text to check the function. It contains a sentence with a period. It also has a question? And there's a colon: right here. This should be enough for testing purposes.") # doctest +NORMALIZE_WHITESPACE
    This is a test text to check the function.
    <BLANKLINE>
    It contains a sentence with a period.
    <BLANKLINE>
    It also has a question?
    <BLANKLINE>
    And there's a colon:
    <BLANKLINE>
    right here.
    <BLANKLINE>
    This should be enough for testing purposes.
    <BLANKLINE>
